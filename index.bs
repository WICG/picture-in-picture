<pre class='metadata'>
Title: Picture In Picture
Shortname: picture-in-picture
Level: 1
Status: ED
ED: https://wicg.github.io/picture-in-picture
Group: WICG
Editor: Fran√ßois Beaufort, Google, fbeaufort@google.com
Editor: Mounir Lamouri, Google, mlamouri@google.com
Abstract: This specification intends to provide APIs to allow websites to
Abstract: create a floating video window over the desktop.
</pre>

<pre class="anchors">
spec: Feature Policy; urlPrefix: https://wicg.github.io/feature-policy/#
    type: dfn
        text: default allowlist
        text: feature
        text: feature name

spec: html; urlPrefix: https://html.spec.whatwg.org/multipage/;
    type: interface
        urlPrefix: embedded-content.html/
            text: HTMLVideoElement; url: #htmlvideoelement
</pre>

<pre class="link-defaults">
spec:dom; type:dfn; for:NamedNodeMap; text:element
spec: html
    type: dfn
        text: triggered by user activation
        text: in parallel
        text: fire a simple event
</pre>

# Introduction # {#intro}

<em>This section is non-normative.</em>

Many users want to continue consuming media while they interact with other
content, sites, or applications on their device. A common UI affordance for
this type of activity is Picture in Picture, where the video is contained in a
separate miniature window that is viewable above all other activities. Most
desktop and mobile OSs have announced or released platform-level support for
Picture In Picture, as have many browsers.

This specification aims to allow websites to initiate and control this behavior
by exposing the following sets of properties to the API:

* Notify the website when it enters and leave Picture in Picture mode.
* Allow the website to trigger Picture in Picture via a user gesture on a video element.
* Allow the website to exit Picture in Picture.
* Allow the website to check if Picture in Picture can be triggered.
* Take a hint for the preferred window size and position which could be ignored by the user agent.

# API # {#api}

The proposed Picture In Picture API is very similar to [[Fullscreen]] as they
have similar properties. The API only applies on
<a><code>HTMLVideoElement</code></a> at the moment but is meant to be
extensible.

## Example ## {#example}

```html
<video id="video" src="https://example.com/video.mp4"></video>
<button id="pipButton"></button>

<script>
  pipButton.hidden = !document.pictureInPictureEnabled;

  pipButton.addEventListener('click', function() {
    if (!document.pictureInPictureElement) {
      video.requestPictureInPicture().catch(error => {
        // Video failed to enter Picture In Picture mode.
      });
    } else {
      document.exitPictureInPicture().catch(error => {
        // Video failed to leave Picture In Picture mode.
      });
    }
  });

  video.addEventListener('enterpictureinpicture', function() {
    // Video entered Picture In Picture mode.
  });

  video.addEventListener('leavepictureinpicture', function() {
    // Video left Picture In Picture mode.
  });
</script>
```

## <code>HTMLVideoElement</code> extension ## {#htmlvideoelement-extension}

<pre class="idl">
  dictionary PictureInPictureOptions {
    unsigned long width;
    unsigned long height;
    unsigned long top;
    unsigned long start;
  };
</pre>

<pre class="idl">
  partial interface HTMLVideoElement {
    Promise&lt;void> requestPictureInPicture(optional PictureInPictureOptions options);

    attribute EventHandler onenterpictureinpicture;
    attribute EventHandler onleavepictureinpicture;
  };
</pre>

The {{requestPictureInPicture()}} method, when invoked, MUST
return <a>a new promise</a> |promise| and run the following steps <a>in
parallel</a>:

1. If {{pictureInPictureEnabled}} is |false|, reject |promise| with a {{NotSupportedError}} and abort these steps.
2. If |options| is not valid, reject |promise| with a {{TypeError}} and abort these steps.
3. Let |video| be the requested video.
4. Run the <a>request Picture In Picture algorithm</a> with |video| and |options|.
5. If the previous step threw an exception, reject |promise| with that exception and abort these steps.
6. Set {{pictureInPictureElement}} to |video|.
7. <a>Queue a task</a> to <a>fire a simple event</a> with the name {{enterpictureinpicture}} at the |video|. The event MUST not bubble, MUST not be cancelable, and has no default action.
8. Return |promise|.

Note: When a video is played in Picture in Picture, the states should
transition as if it was played inline. That means that the events should fire
at the same time, calling methods should have the same behaviour, etc. However,
the user agent might transition out of Picture in Picture when the video
element enters a state that is considered not compatible with Picture in
Picture.

When the <dfn>request Picture In Picture algorithm</dfn> with |video|
and |options| is invoked, the user agent MUST run the following steps:

1. If the algorithm is not <a>triggered by user activation</a>, throw a {{SecurityError}} and abort these steps.
2. Let |pipWindow| be the Picture In Picture window that consistently stays above most other windows.
3. Let |pipVideo| be the video contained in the |pipWindow|.
4. If a |pipWindow| is not already created, create one.
5. If one can't be created, throw a {{UnknownError}} and abort these steps.
6. Apply |options| {{width}}, {{height}}, {{PictureInPictureOptions/top}}, and {{start}} to the |pipWindow| dimensions and position. If some |options| can't be applied, it SHOULD apply latest ones that were successfully set if any.
7. Render |video| frames in the |pipVideo|.

Note: It is recommended that the |video| frames are not rendered in the page and
in the |pipVideo| at the same time but if they are, they must be kept in sync.

## <code>Document</code> and <code>DocumentOrShadowRoot</code> extension ## {#document-extension}

<pre class="idl">
  partial interface Document {
    readonly attribute boolean pictureInPictureEnabled;

    Promise&lt;void> exitPictureInPicture();
  };
</pre>

<pre class="idl">
  partial interface DocumentOrShadowRoot {
    readonly attribute Element? pictureInPictureElement;
  };
</pre>

The {{pictureInPictureEnabled}} attribute's getter must return
true if the <a>context object</a> is <a>allowed to use</a> the feature
indicated by attribute name <code>allowpictureinpicture</code> and <a>Picture
In Picture is supported</a>, and false otherwise.

<dfn>Picture In Picture is supported</dfn> if there is no
previously-established user preference, security risk, or platform limitation.

The {{exitPictureInPicture()}} method, when invoked, MUST
return <a>a new promise</a> |promise| and run the following steps <a>in
parallel</a>:

1. If {{pictureInPictureEnabled}} is |false|, reject |promise| with a {{NotSupportedError}} and abort these steps.
2. Run the <a>exit Picture In Picture algorithm</a>.
3. If the previous step threw an exception, reject |promise| with that exception and abort these steps.
4. Unset {{pictureInPictureElement}}.
5. <a>Queue a task</a> to <a>fire a simple event</a> with the name {{leavepictureinpicture}} at the |video|. The event MUST not bubble, MUST not be cancelable, and has no default action.
6. Return |promise|.

When the <dfn>exit Picture In Picture algorithm</dfn> is invoked,
the user agent MUST run the following steps:

1. Let |pipWindow| be the current Picture In Picture window.
2. Let |pipVideo| be the video contained in the |pipWindow|.
3. Let |video| be the source video of |pipVideo| frames.
4. Close |pipWindow|.
5. If |pipWindow| can't be closed, throw a {{UnknownError}} and abort these steps.
6. Render |pipVideo| frames in the |video|.

## Event types ## {#event-types}

<dl>
  <dt><dfn event for="HTMLVideoElement"><code>enterpictureinpicture</code></dfn></dt>
  <dd>
    Fired on a {{HTMLVideoElement}} when it enters Picture In Picture.
  </dd>
  <dt><dfn event for="HTMLVideoElement"><code>leavepictureinpicture</code></dfn></dt>
  <dd>
    Fired on a {{HTMLVideoElement}} when it leaves Picture In Picture.
  </dd>
</dl>

# Integration # {#integration}

User agents are encouraged to implement native media Picture In Picture
controls in terms of {{requestPictureInPicture()}} and
{{exitPictureInPicture()}}.

## Interaction with remote playback ## {#remote-playback}

The <a>Remote Playback specification</a> defines a <a>local playback device</a>
and a <a>local playback state</a>. For the purpose of Picture in Picture, the
playback is local and regardless of whether it is played in page or in Picture
in Picture.

## One Picture in Picture window ## {#one-pip-window}

Operating systems with a Picture In Picture API usually restricts Picture In
Picture to only one window.  Whether only one window is allowed in Picture In
Picture will be left to the implementation and the platform. However, because
of the one Picture In Picture window limitation, the specification assumes that
a given {{Document}} can only have one Picture In Picture window.

What happens when there is a Picture In Picture request while a window is
already in Picture In Picture will be left as an implementation details: the
current Picture In Picture window could be closed, the Picture In Picture
request could be rejected or even two Picture In Picture windows can be
created. Regardless, the User Agent will have to fire the appropriate events
in order to notify the website of the Picture In Picture status changes.

## Feature Policy ## {#feature-policy}

This specification defines a <a>feature</a> that controls whether
{{pictureInPictureEnabled}} is `true` or `false`.

The <a>feature name</a> for this feature is <code>"picture-in-picture"</code>.

The <a>default allowlist</a> for this feature is <code>["self"]</code>.
